/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision2_0.adventureworks2014.EmployeeDepartmentHistory;
import com.salesvision2_0.adventureworks2014.EmployeeDepartmentHistoryId;


/**
 * ServiceImpl object for domain model class EmployeeDepartmentHistory.
 *
 * @see EmployeeDepartmentHistory
 */
@Service("AdventureWorks2014.EmployeeDepartmentHistoryService")
public class EmployeeDepartmentHistoryServiceImpl implements EmployeeDepartmentHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeDepartmentHistoryServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.EmployeeDepartmentHistoryDao")
    private WMGenericDao<EmployeeDepartmentHistory, EmployeeDepartmentHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeDepartmentHistory, EmployeeDepartmentHistoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
	public EmployeeDepartmentHistory create(EmployeeDepartmentHistory employeeDepartmentHistory) {
        LOGGER.debug("Creating a new EmployeeDepartmentHistory with information: {}", employeeDepartmentHistory);
        EmployeeDepartmentHistory employeeDepartmentHistoryCreated = this.wmGenericDao.create(employeeDepartmentHistory);
        return employeeDepartmentHistoryCreated;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public EmployeeDepartmentHistory getById(EmployeeDepartmentHistoryId employeedepartmenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeDepartmentHistory by id: {}", employeedepartmenthistoryId);
        EmployeeDepartmentHistory employeeDepartmentHistory = this.wmGenericDao.findById(employeedepartmenthistoryId);
        if (employeeDepartmentHistory == null){
            LOGGER.debug("No EmployeeDepartmentHistory found with id: {}", employeedepartmenthistoryId);
            throw new EntityNotFoundException(String.valueOf(employeedepartmenthistoryId));
        }
        return employeeDepartmentHistory;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public EmployeeDepartmentHistory findById(EmployeeDepartmentHistoryId employeedepartmenthistoryId) {
        LOGGER.debug("Finding EmployeeDepartmentHistory by id: {}", employeedepartmenthistoryId);
        return this.wmGenericDao.findById(employeedepartmenthistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
	@Override
	public EmployeeDepartmentHistory update(EmployeeDepartmentHistory employeeDepartmentHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeDepartmentHistory with information: {}", employeeDepartmentHistory);
        this.wmGenericDao.update(employeeDepartmentHistory);

        EmployeeDepartmentHistoryId employeedepartmenthistoryId = new EmployeeDepartmentHistoryId();
        employeedepartmenthistoryId.setBusinessEntityId(employeeDepartmentHistory.getBusinessEntityId());
        employeedepartmenthistoryId.setStartDate(employeeDepartmentHistory.getStartDate());
        employeedepartmenthistoryId.setDepartmentId(employeeDepartmentHistory.getDepartmentId());
        employeedepartmenthistoryId.setShiftId(employeeDepartmentHistory.getShiftId());

        return this.wmGenericDao.findById(employeedepartmenthistoryId);
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
	@Override
	public EmployeeDepartmentHistory delete(EmployeeDepartmentHistoryId employeedepartmenthistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeDepartmentHistory with id: {}", employeedepartmenthistoryId);
        EmployeeDepartmentHistory deleted = this.wmGenericDao.findById(employeedepartmenthistoryId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeDepartmentHistory found with id: {}", employeedepartmenthistoryId);
            throw new EntityNotFoundException(String.valueOf(employeedepartmenthistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public Page<EmployeeDepartmentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeDepartmentHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<EmployeeDepartmentHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeDepartmentHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table EmployeeDepartmentHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

