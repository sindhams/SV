/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision2_0.mytestdatabase.Personnel;


/**
 * ServiceImpl object for domain model class Personnel.
 *
 * @see Personnel
 */
@Service("MyTestDatabase.PersonnelService")
public class PersonnelServiceImpl implements PersonnelService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonnelServiceImpl.class);


    @Autowired
    @Qualifier("MyTestDatabase.PersonnelDao")
    private WMGenericDao<Personnel, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Personnel, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
	public Personnel create(Personnel personnel) {
        LOGGER.debug("Creating a new Personnel with information: {}", personnel);
        Personnel personnelCreated = this.wmGenericDao.create(personnel);
        return personnelCreated;
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Personnel getById(Integer personnelId) throws EntityNotFoundException {
        LOGGER.debug("Finding Personnel by id: {}", personnelId);
        Personnel personnel = this.wmGenericDao.findById(personnelId);
        if (personnel == null){
            LOGGER.debug("No Personnel found with id: {}", personnelId);
            throw new EntityNotFoundException(String.valueOf(personnelId));
        }
        return personnel;
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Personnel findById(Integer personnelId) {
        LOGGER.debug("Finding Personnel by id: {}", personnelId);
        return this.wmGenericDao.findById(personnelId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "MyTestDatabaseTransactionManager")
	@Override
	public Personnel update(Personnel personnel) throws EntityNotFoundException {
        LOGGER.debug("Updating Personnel with information: {}", personnel);
        this.wmGenericDao.update(personnel);

        Integer personnelId = personnel.getId();

        return this.wmGenericDao.findById(personnelId);
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
	@Override
	public Personnel delete(Integer personnelId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personnel with id: {}", personnelId);
        Personnel deleted = this.wmGenericDao.findById(personnelId);
        if (deleted == null) {
            LOGGER.debug("No Personnel found with id: {}", personnelId);
            throw new EntityNotFoundException(String.valueOf(personnelId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public Page<Personnel> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Personnels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Personnel> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Personnels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service MyTestDatabase for table Personnel to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

