/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision2_0.mytestdatabase.Personnel;
import com.salesvision2_0.mytestdatabase.service.PersonnelService;


/**
 * Controller object for domain model class Personnel.
 * @see Personnel
 */
@RestController("MyTestDatabase.PersonnelController")
@Api(value = "PersonnelController", description = "Exposes APIs to work with Personnel resource.")
@RequestMapping("/MyTestDatabase/Personnel")
public class PersonnelController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonnelController.class);

    @Autowired
	@Qualifier("MyTestDatabase.PersonnelService")
	private PersonnelService personnelService;

	@ApiOperation(value = "Creates a new Personnel instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Personnel createPersonnel(@RequestBody Personnel personnel) {
		LOGGER.debug("Create Personnel with information: {}" , personnel);

		personnel = personnelService.create(personnel);
		LOGGER.debug("Created Personnel with information: {}" , personnel);

	    return personnel;
	}


    @ApiOperation(value = "Returns the Personnel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personnel getPersonnel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Personnel with id: {}" , id);

        Personnel foundPersonnel = personnelService.getById(id);
        LOGGER.debug("Personnel details with id: {}" , foundPersonnel);

        return foundPersonnel;
    }

    @ApiOperation(value = "Updates the Personnel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Personnel editPersonnel(@PathVariable("id") Integer id, @RequestBody Personnel personnel) throws EntityNotFoundException {
        LOGGER.debug("Editing Personnel with id: {}" , personnel.getId());

        personnel.setId(id);
        personnel = personnelService.update(personnel);
        LOGGER.debug("Personnel details with id: {}" , personnel);

        return personnel;
    }

    @ApiOperation(value = "Deletes the Personnel instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonnel(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Personnel with id: {}" , id);

        Personnel deletedPersonnel = personnelService.delete(id);

        return deletedPersonnel != null;
    }

    /**
     * @deprecated Use {@link #findPersonnels(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Personnel instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnel> searchPersonnelsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Personnels list");
        return personnelService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personnel instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnel> findPersonnels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personnels list");
        return personnelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Personnel instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnel> filterPersonnels(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Personnels list");
        return personnelService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonnels(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personnelService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Personnel instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonnels( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Personnels");
		return personnelService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonnelAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personnelService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonnelService instance
	 */
	protected void setPersonnelService(PersonnelService service) {
		this.personnelService = service;
	}

}

