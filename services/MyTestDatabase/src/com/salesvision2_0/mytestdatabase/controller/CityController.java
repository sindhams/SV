/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision2_0.mytestdatabase.City;
import com.salesvision2_0.mytestdatabase.Personnel;
import com.salesvision2_0.mytestdatabase.service.CityService;


/**
 * Controller object for domain model class City.
 * @see City
 */
@RestController("MyTestDatabase.CityController")
@Api(value = "CityController", description = "Exposes APIs to work with City resource.")
@RequestMapping("/MyTestDatabase/City")
public class CityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CityController.class);

    @Autowired
	@Qualifier("MyTestDatabase.CityService")
	private CityService cityService;

	@ApiOperation(value = "Creates a new City instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public City createCity(@RequestBody City cityInstance) {
		LOGGER.debug("Create City with information: {}" , cityInstance);

		cityInstance = cityService.create(cityInstance);
		LOGGER.debug("Created City with information: {}" , cityInstance);

	    return cityInstance;
	}


    @ApiOperation(value = "Returns the City instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public City getCity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting City with id: {}" , id);

        City foundCity = cityService.getById(id);
        LOGGER.debug("City details with id: {}" , foundCity);

        return foundCity;
    }

    @ApiOperation(value = "Updates the City instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public City editCity(@PathVariable("id") Integer id, @RequestBody City cityInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing City with id: {}" , cityInstance.getId());

        cityInstance.setId(id);
        cityInstance = cityService.update(cityInstance);
        LOGGER.debug("City details with id: {}" , cityInstance);

        return cityInstance;
    }

    @ApiOperation(value = "Deletes the City instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting City with id: {}" , id);

        City deletedCity = cityService.delete(id);

        return deletedCity != null;
    }

    /**
     * @deprecated Use {@link #findCities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of City instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<City> searchCitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Cities list");
        return cityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of City instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<City> findCities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cities list");
        return cityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of City instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<City> filterCities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Cities list");
        return cityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cityService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of City instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Cities");
		return cityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/personnels", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personnels instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Personnel> findAssociatedPersonnels(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personnels");
        return cityService.findAssociatedPersonnels(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CityService instance
	 */
	protected void setCityService(CityService service) {
		this.cityService = service;
	}

}

